generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int              @id @default(autoincrement())
  name              String           @db.VarChar
  phone_number      String           @db.VarChar
  address           String           @db.VarChar
  email             String           @unique @db.VarChar
  password_hash     String           @db.VarChar
  registration_date DateTime?        @default(now()) @db.Timestamp(6)
  bookings          BookingDetails[]
  favorites         Favorites[]
  reviews           Review[]
}

model ServiceProvider {
  service_provider_id Int              @id @default(autoincrement())
  name                String           @db.VarChar
  phone_number        String           @db.VarChar
  email               String           @unique @db.VarChar
  password_hash       String           @db.VarChar
  registration_date   DateTime?        @default(now()) @db.Timestamp(6)
  about_me            String?
  plans               Json?            @db.Json
  images              Json?            @db.Json
  category            Json?            @db.Json
  bookings            BookingDetails[]
  favorites           Favorites[]
}

model Favorites {
  user_id             Int
  service_provider_id Int
  serviceProvider     ServiceProvider @relation(fields: [service_provider_id], references: [service_provider_id], onDelete: Cascade, onUpdate: NoAction)
  user                User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, service_provider_id])
}

model BookingDetails {
  booking_id          Int             @id @default(autoincrement())
  user_id             Int
  service_provider_id Int
  transaction_id      Int?            @unique
  timeslot            DateTime        @db.Timestamp(6)
  notes               String?
  serviceProvider     ServiceProvider @relation(fields: [service_provider_id], references: [service_provider_id], onDelete: Cascade, onUpdate: NoAction)
  user                User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  payments            Payments?
  reviews             Review[]
}

model Payments {
  transaction_id Int            @id @default(autoincrement())
  booking_id     Int            @unique
  recipient      Json?          @db.Json
  booking        BookingDetails @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade, onUpdate: NoAction)
}

model Review {
  review_id   Int            @id @default(autoincrement())
  user_id     Int
  booking_id  Int
  review_text String
  rating      Int
  booking     BookingDetails @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade, onUpdate: NoAction)
  user        User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
